<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler" requirePermission="false" />
		<sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
			<section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
			<section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
			<section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
			<section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
		</sectionGroup>
	</configSections>

	<!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
	     which is necessary for OpenID urls with unicode characters in the domain/host name. 
	     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
	<uri>
		<idn enabled="All"/>
		<iriParsing enabled="true"/>
	</uri>

	<system.net>
		<defaultProxy enabled="true" />
		<settings>
			<!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
			<!--<servicePointManager checkCertificateRevocationList="true"/>-->
		</settings>
	</system.net>

	<!-- this is an optional configuration section where aspects of dotnetopenauth can be customized -->
	<dotNetOpenAuth>
		<!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
		<reporting enabled="true" />

		<!-- Relaxing SSL requirements is useful for simple samples, but NOT a good idea in production. -->
		<messaging relaxSslRequirements="true" />
	</dotNetOpenAuth>

	<appSettings>
		<!-- Fill in your various consumer keys and secrets here to make the sample work. -->
		<!-- You must get these values by signing up with each individual service provider. -->
		<!-- Twitter sign-up: https://twitter.com/oauth_clients -->
		<add key="twitterConsumerKey" value="eRJd2AMcOnGqDOtF3IrBQ" />
		<add key="twitterConsumerSecret" value="iTijQWFOSDokpkVIPnlLbdmf3wPZgUVqktXKASg0QjM" />
		<!-- Google sign-up: https://www.google.com/accounts/ManageDomains -->
		<add key="googleConsumerKey" value="anonymous"/>
		<add key="googleConsumerSecret" value="anonymous"/>
    <!--Google API sign-up: https://code.google.com/apis/console/ (OAuth2) -->
    <add key="googleClientID" value="" />
    <add key="googleClientSecret" value="" />    
		<!-- Yammer sign-up: https://www.yammer.com/client_applications/new -->
		<add key="yammerConsumerKey" value=""/>
		<add key="yammerConsumerSecret" value=""/>
		<!-- Facebook sign-up: http://developers.facebook.com/setup/ -->
		<add key="facebookAppID" value="367207604173"/>
		<add key="facebookAppSecret" value="1df77e64055c4d7d3583cefdf2bc62d7"/>
		<!-- Windows Live sign-up: http://go.microsoft.com/fwlink/p/?LinkId=193157 -->
		<add key="windowsLiveAppID" value="000000004408E558" />
		<add key="windowsLiveAppSecret" value="od8NVdanEIWqmlKu9hOepBE3AfUu4jCw" />
		<!-- AzureAD sign-up: http://manage.windowsazure.com -->
		<add key="AzureADAppID" value="64e0b14b-43ae-497c-b1a8-e8a841a341fd" />
		<add key="AzureADAppSecret" value="MySecretPassword" />

		<add key="ValidationSettings:UnobtrusiveValidationMode" value="None" />
	</appSettings>
	<connectionStrings/>

	<system.web>
		<httpRuntime targetFramework="4.5" />
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="true" targetFramework="4.0" />
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<authentication mode="Windows"/>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID" />
	</system.web>
	<!-- 
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
    -->
	<log4net>
		<appender name="TracePageAppender" type="OAuthClient.TracePageAppender, OAuthClient">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date (GMT%date{%z}) [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value="INFO" />
			<!--<appender-ref ref="RollingFileAppender" />-->
			<appender-ref ref="TracePageAppender" />
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name="DotNetOpenAuth">
			<level value="ALL" />
		</logger>
	</log4net>
	<system.serviceModel>
		<bindings>
			<wsHttpBinding>
				<binding name="WSHttpBinding_IDataApi" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00" bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true" allowCookies="false">
					<readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
					<reliableSession ordered="true" inactivityTimeout="00:10:00" enabled="false" />
					<security mode="Message">
						<transport clientCredentialType="Windows" proxyCredentialType="None" realm="" />
						<message clientCredentialType="Windows" negotiateServiceCredential="true" algorithmSuite="Default" />
					</security>
				</binding>
			</wsHttpBinding>
		</bindings>
		<client>
			<endpoint address="http://localhost:65170/DataApi.svc" binding="wsHttpBinding" bindingConfiguration="WSHttpBinding_IDataApi" contract="SampleResourceServer.IDataApi" name="WSHttpBinding_IDataApi">
				<identity>
					<dns value="localhost" />
				</identity>
			</endpoint>
		</client>
	</system.serviceModel>
	<system.webServer>
		<modules runAllManagedModulesForAllRequests="true" />
	</system.webServer>
</configuration>