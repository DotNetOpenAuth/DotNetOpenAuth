<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" InitialTargets="InitializeProps">
	<PropertyGroup>
		<ProductName>DotNetOpenAuth</ProductName>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<TargetFrameworkVersion Condition=" '$(TargetFrameworkVersion)' == '' ">v3.5</TargetFrameworkVersion>
		<DisableFastUpToDateCheck>false</DisableFastUpToDateCheck>
		<DropsRoot>$(ProjectRoot)drops\$(TargetFrameworkVersion)\$(Configuration)\</DropsRoot>
		<OutputPath>$(ProjectRoot)bin\$(TargetFrameworkVersion)\$(Configuration)\</OutputPath>
		<DocOutputPath>$(ProjectRoot)doc\</DocOutputPath>
		<IntermediatePath>$(ProjectRoot)obj\$(TargetFrameworkVersion)\$(Configuration)\</IntermediatePath>
		<BaseIntermediateOutputPath Condition=" '$(BaseIntermediateOutputPath)' == '' ">obj\$(TargetFrameworkVersion)\</BaseIntermediateOutputPath>
		<ToolsDir>$(ProjectRoot)tools\</ToolsDir>
		<ZipLevel>6</ZipLevel>
		<Zip7ToolPath>$(ToolsDir)7-Zip.x86\</Zip7ToolPath>
		<NuGetToolPath>$(ToolsDir)NuGet\</NuGetToolPath>
		<ZipFormat Condition=" '$(ZipFormat)' == '' ">.7z</ZipFormat>
		<ClrVersion Condition=" '$(TargetFrameworkVersion)' == 'v4.0' ">4</ClrVersion>
		<ClrVersion Condition=" '$(TargetFrameworkVersion)' != 'v4.0' ">2</ClrVersion>
		
		<MvcVersion Condition=" '$(MvcVersion) == '' And '$(ClrVersion)' == '4' ">2.0.0.0</MvcVersion>
		<!-- MVC 2 can run on CLR 2 (it doesn't require CLR 4) but since MVC 2 apps tend to use type forwarding,
         it's a more broadly consumable idea to bind against MVC 1 for the library unless we're building on CLR 4,
         which will definitely have MVC 2 available. -->
		<MvcVersion Condition=" '$(MvcVersion) == '' And '$(ClrVersion)' == '2' ">1.0.0.0</MvcVersion>
		
		<Log4NetPath Condition=" '$(Log4NetPath)' == '' And '$(ClrVersion)' == '4' ">..\..\lib\net-v4.0\log4net.dll</Log4NetPath>
		<Log4NetPath Condition=" '$(Log4NetPath)' == '' And '$(ClrVersion)' == '2' ">..\..\lib\log4net.dll</Log4NetPath>
		
		<SignAssembly>true</SignAssembly>
		<PublicKeyFile Condition="'$(PublicKeyFile)' == ''">$(ProjectRoot)src\official-build-key.pub</PublicKeyFile>
		<AssemblyOriginatorKeyFile Condition="'$(AssemblyOriginatorKeyFile)' == ''">$(PublicKeyFile)</AssemblyOriginatorKeyFile>
		<KeyPairContainer Condition="'$(KeyPairContainer)' == ''">DotNetOpenAuth</KeyPairContainer>
		<PublicKeyToken>2780CCD10D57B246</PublicKeyToken>
		<DelaySign>true</DelaySign>
		<SignedSubPath>signed\</SignedSubPath>

		<ILMergeOutputAssemblyDirectory>$(OutputPath)unified\</ILMergeOutputAssemblyDirectory>
		<ILMergeOutputAssembly>$(ILMergeOutputAssemblyDirectory)$(ProductName).dll</ILMergeOutputAssembly>

		<!-- Always use our own toolset's copy of Code Contracts for reliably reproducible builds. 
		     Suppress the installed code contracts from importing itself. -->
		<DontImportCodeContracts>true</DontImportCodeContracts>
		<ImportCodeContractsFromToolset>true</ImportCodeContractsFromToolset>
	</PropertyGroup>

	<ItemGroup>
		<SignDependsOn Include="Build" />
		<ILMergeInputAssemblies Include="$(OutputPath)$(ProductName).dll" />
		<ILMergeInputAssemblies Condition=" '$(ClrVersion)' == '2' "
		                        Include="$(ProjectRoot)lib\Microsoft.Contracts.dll" />
	</ItemGroup>

	<Import Project="$(ProjectRoot)lib\DotNetOpenAuth.BuildTasks.targets" />

	<Target Name="InitializeProps">
		<CheckAdminRights>
			<Output TaskParameter="IsElevated" PropertyName="IsElevated" />
		</CheckAdminRights>
		<Message Text="IsElevated = $(IsElevated)" />
	</Target>
</Project>