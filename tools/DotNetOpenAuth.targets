<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
	<Import Project="DotNetOpenAuth.Versioning.targets" />
	<Import Project="JavascriptPacker.targets" />
	<UsingTask AssemblyFile="$(ProjectRoot)lib\MSBuild.Community.Tasks.dll" TaskName="ILMerge"/>

	<!-- Prevent our own item types from appearing in Solution Explorer. -->
	<ItemDefinitionGroup>
		<SignDependsOn>
			<Visible>false</Visible>
		</SignDependsOn>
		<DelaySignedAssemblies>
			<Visible>false</Visible>
		</DelaySignedAssemblies>
	</ItemDefinitionGroup>

	<PropertyGroup>
		<DefineConstants Condition=" '$(SignAssembly)' == 'true' ">$(DefineConstants);StrongNameSigned</DefineConstants>
		<AssemblySearchPaths>$(ProjectRoot)lib;$(AssemblySearchPaths)</AssemblySearchPaths>
	</PropertyGroup>

	<ItemGroup>
		<DelaySignedAssemblies Include="$(TargetPath)" Condition=" '$(SuppressTargetPathDelaySignedAssembly)' != 'true' "/>
	</ItemGroup>

	<!-- This is our multi-targeting aware shadow assembly generator. -->
	<UsingTask AssemblyFile="$(ProjectRoot)\lib\DotNetOpenAuth.BuildTasks.dll" TaskName="Publicize" />
	<PropertyGroup>
		<ResolveReferencesDependsOn>
			$(ResolveReferencesDependsOn);
			CreatePublicAccessors
		</ResolveReferencesDependsOn>
	</PropertyGroup>
	<!-- Remove the built-in shadow generator, since we do it ourselves to avoid bugs in the Microsoft code. -->
	<Target Name="CreatePublicAccessors">
		<PropertyGroup>
			<VSVersionForTargetFramework>v10.0</VSVersionForTargetFramework>
		</PropertyGroup>
		<Publicize
			Condition=" '%(ReferencePath.Shadow)' == 'true' "
			SkipUnchangedFiles="true"
			MSBuildExtensionsPath="$(MSBuildExtensionsPath)"
			ToolPath="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\$(VSVersionForTargetFramework)\TeamTest"
			Assembly="@(ReferencePath)"
			DelaySign="$(DelaySign)"
			KeyFile="$(PublicKeyFile)">
			<Output TaskParameter="AccessorAssembly" ItemName="ReferencePath" />
		</Publicize>
	</Target>

	<Target Name="Sign" DependsOnTargets="@(SignDependsOn)" Outputs="@(SignedDependencies);@(SignedAssemblyTargets)" Condition=" '@(DelaySignedAssemblies)' != '' ">
		<!-- Make sure that all dependencies are also signed. -->
		<MSBuild Projects="@(ProjectReference)" Targets="Sign" BuildInParallel="$(BuildInParallel)">
			<Output TaskParameter="TargetOutputs" ItemName="SignedDependencies"/>
		</MSBuild>

		<!-- Add the resource assemblies. -->
		<ItemGroup>
			<!-- Make sure that we consider the TargetPath's satellites even if TargetPath itself was suppressed. -->
			<DelaySignedAssembliesForSatellites Include="@(DelaySignedAssemblies)" />
			<DelaySignedAssembliesForSatellites Include="$(TargetPath)" Condition=" '$(SuppressTargetPathDelaySignedAssembly)' == 'true' "/>
		</ItemGroup>
		<PropertyGroup>
			<DelaySignedSatelliteAssembliesPattern>@(DelaySignedAssembliesForSatellites->'%(RootDir)%(Directory)*\%(FileName).resources.*')</DelaySignedSatelliteAssembliesPattern>
		</PropertyGroup>
		<ItemGroup>
			<DelaySignedSatelliteAssemblies Include="$(DelaySignedSatelliteAssembliesPattern)" />
			<DelaySignedSatelliteAssemblies>
				<CultureDir>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName('%(Directory)'))))\</CultureDir>
			</DelaySignedSatelliteAssemblies>
		</ItemGroup>

		<!-- Don't sign assemblies in place.  Lots of reasons for this, not the least of which is that
		     subsequent builds of web site projects will cause the satellite assemblies to be regenerated (bizarre)
				 and erase the signature. -->
		<ItemGroup>
			<AssembliesToSign Include="@(DelaySignedAssemblies);@(DelaySignedSatelliteAssemblies)" />
			<SignedAssemblyTargets Include="@(AssembliesToSign->'%(RootDir)%(Directory)$(SignedSubPath)%(FileName)%(Extension)')">
				<UnsignedAssemblyPath>%(AssembliesToSign.Identity)</UnsignedAssemblyPath>
				<SymbolPath Condition="Exists('%(RootDir)%(Directory)%(FileName).pdb')">%(RootDir)%(Directory)%(FileName).pdb</SymbolPath>
				<XmlDocumentationFile Condition="Exists('%(RootDir)%(Directory)%(FileName).xml')">%(RootDir)%(Directory)%(FileName).xml</XmlDocumentationFile>
			</SignedAssemblyTargets>
		</ItemGroup>

		<Message Text="Signing delay-signed assemblies using key pair container $(KeyPairContainer)." />
		<Copy SourceFiles="@(AssembliesToSign)" DestinationFiles="@(SignedAssemblyTargets)" />
		<ReSignDelaySignedAssemblies
			KeyContainer="$(KeyPairContainer)"
			Assemblies="@(SignedAssemblyTargets)"
			Condition="Exists(%(Identity))" />
	</Target>

	<Target Name="ResignDelaySignedAssemblies" Outputs="@(ResignedAssembliesOutputs)">
		<MSBuild Projects="@(DelaySignedProjects)" Targets="Sign" BuildInParallel="$(BuildInParallel)"
						 Condition=" '%(DelaySignedProjects.TargetFrameworkVersion)' == '' or '%(DelaySignedProjects.TargetFrameworkVersion)' == '$(TargetFrameworkVersion)' ">
			<Output TaskParameter="TargetOutputs" ItemName="ResignedAssembliesOutputs"/>
		</MSBuild>
	</Target>

	<Target Name="ResignShippingDelaySignedAssemblies" Outputs="@(ResignedAssembliesOutputs)">
		<MSBuild Projects="@(DelaySignedProjects)" Targets="Sign" BuildInParallel="$(BuildInParallel)"
						 Condition=" '%(DelaySignedProjects.Nonshipping)' != 'true' and ('%(DelaySignedProjects.TargetFrameworkVersion)' == '' or '%(DelaySignedProjects.TargetFrameworkVersion)' == '$(TargetFrameworkVersion)') ">
			<Output TaskParameter="TargetOutputs" ItemName="ResignedAssembliesOutputs"/>
		</MSBuild>
	</Target>

	<Target Name="GetOutputPath" Outputs="$(OutputPath)" />
</Project>
