<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), EnlistmentInfo.props))\EnlistmentInfo.props" Condition=" '$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), EnlistmentInfo.props))' != '' " />
	<Import Project="$(MSBuildProjectDirectory)\..\tools\DotNetOpenAuth.automated.props"/>
	<Import Project="ProjectTemplates.props"/>

	<PropertyGroup>
		<ProjectTemplateMaxPath Condition=" '$(ProjectTemplateMaxPath)' == '' ">10</ProjectTemplateMaxPath>

		<LayoutDependsOn>
			BuildUnifiedProduct;
			ReSignDelaySignedAssemblies;
			DeploySql;
			LayoutProjects;
		</LayoutDependsOn>

		<!-- We don't need to build the project templates, but to make sure we're not shipping junk,
		     we default to building them as a validation step. -->
		<LayoutDependsOn Condition=" '$(Validation)' == 'Full' ">
			Validate;
			$(LayoutDependsOn);
		</LayoutDependsOn>
	</PropertyGroup>

	<ItemGroup>
		<ProjectTemplates Include="**\*.*proj" Exclude="$(MSBuildThisFile)" />

		<ProjectReferencesToRemove Include="..\RelyingPartyDatabase\RelyingPartyDatabase.dbproj"/>
		<AssemblyReferencesToReplaceWith Include="REMOVE" />
	</ItemGroup>

	<Target Name="Validate">
		<MSBuild Projects="@(ProjectTemplates)" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="DeploySql">
		<!-- This causes the SQL script that generates the database to be deployed to the RelyingPartyLogic class library. -->
		<MSBuild Projects="RelyingPartyDatabase\RelyingPartyDatabase.dbproj" Targets="Build;Deploy" BuildInParallel="$(BuildInParallel)" />
	</Target>

	<Target Name="LayoutProjects">
		<MSBuild Projects="..\src\$(ProductName)\$(ProductName).proj" Targets="Sign" BuildInParallel="$(BuildInParallel)">
			<Output TaskParameter="TargetOutputs" ItemName="SignedProductAssemblies" />
		</MSBuild>
		<ItemGroup>
			<TemplateProjects Include="**\*.csproj" Exclude="$(MSBuildThisFile)">
				<AfterTokens>$safeprojectname$</AfterTokens>
				<!-- Projects can get changed after the transform+copy operation, so don't skip copying them. -->
				<SkipUnchangedFiles>false</SkipUnchangedFiles>
			</TemplateProjects>
			<TemplateProjects>
				<BeforeTokens>%(RecursiveDir)</BeforeTokens>
			</TemplateProjects>
			<TemplateProjectsLayout Include="@(TemplateProjects->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')"/>

			<!-- Add external libraries and their symbols -->
			<ProjectTemplateLibraries Include="@(SignedProductAssemblies)" />
			<ProjectTemplateLibraries Include="@(SignedProductAssemblies->'%(SymbolPath)')" />
			<ProjectTemplateLibraries Include="$(OutputPath)$(ProductName).xml" />
			<!-- ... and log4net -->
			<ProjectTemplateLibraries Include="$(ProjectRoot)lib\log4net.dll" />
			<ProjectTemplateLibraries Include="$(ProjectRoot)lib\log4net.xml" />
			<ProjectTemplateLibrariesTargets Include="@(ProjectTemplateLibraries->'$(ProjectTemplatesLayoutPath)RelyingPartyLogic\lib\%(CultureDir)%(FileName)%(Extension)')">
				<ApparentSource>RelyingPartyLogic\lib\%(ProjectTemplateLibraries.CultureDir)%(FileName)%(Extension)</ApparentSource>
				<ActualSource>%(Identity)</ActualSource>
			</ProjectTemplateLibrariesTargets>
			<ProjectTemplateLibrariesSourceExceptions Include="@(ProjectTemplateLibrariesTargets->'%(ApparentSource)')"/>

			<FixupReferenceAssemblies Include="@(ProjectTemplateLibrariesTargets)" Condition="'%(Extension)' == '.dll'" />
			<InjectedLibraryItems Include="@(ProjectTemplateLibraries->'lib\%(CultureDir)%(FileName)%(Extension)')">
				<Visible/>
				<UnsignedAssemblyPath/>
				<SymbolPath/>
				<OriginalItemSpec/>
				<MSBuildSourceProjectFile/>
				<MSBuildSourceTargetName/>
				<CultureDir/>
			</InjectedLibraryItems>

			<VSProjectTemplates Include="**\*.vstemplate" Exclude="*.vstemplate" />
			<VSProjectTemplatesLayout Include="@(VSProjectTemplates->'$(ProjectTemplatesLayoutPath)%(RecursiveDir)%(FileName)%(Extension)')" />
		</ItemGroup>

		<Trim Inputs="@(TemplateProjects)" MetadataName="BeforeTokens" AllAfter="\">
			<Output TaskParameter="Outputs" ItemName="TemplateProjectsTransformSource" />
		</Trim>
		<CopyWithTokenSubstitution SourceFiles="@(TemplateProjectsTransformSource)" DestinationFiles="@(TemplateProjectsLayout)">
			<Output TaskParameter="CopiedFiles" ItemName="CopiedProjectFiles" />
		</CopyWithTokenSubstitution>
		<ChangeProjectReferenceToAssemblyReference
			Projects="@(CopiedProjectFiles)"
			Condition=" '%(CopiedProjectFiles.Extension)' == '.csproj' "
			ProjectReferences="@(ProjectReferencesToRemove)"
			References="@(AssemblyReferencesToReplaceWith)" />
		<FixupReferenceHintPaths
			Projects="@(CopiedProjectFiles)"
			References="@(FixupReferenceAssemblies)"
			/>
		<AddProjectItems
			Projects="@(CopiedProjectFiles)"
			Condition="'%(CopiedProjectFiles.FileName)%(CopiedProjectFiles.Extension)' == 'RelyingPartyLogic.csproj'"
			Items="@(InjectedLibraryItems)"
			/>
		<MergeProjectWithVSTemplate
			ProjectItemTypes="@(VsTemplateProjectItemTypes)"
			ReplaceParametersExtensions="@(VsTemplateParameterReplaceExtensions)"
			SourceTemplates="@(VSProjectTemplates)"
			SourceProjects="@(TemplateProjectsLayout)"
			DestinationTemplates="@(VSProjectTemplatesLayout)"
			SourcePathExceptions="@(ProjectTemplateLibrariesSourceExceptions)"
			MaximumRelativePathLength="$(ProjectTemplateMaxPath)"
			>
			<Output TaskParameter="ProjectItems" ItemName="TemplateProjectItems"/>
		</MergeProjectWithVSTemplate>
	</Target>

	<Target Name="Layout" DependsOnTargets="$(LayoutDependsOn)">
		<ItemGroup>
			<TemplateProjectItems Condition=" '%(Transform)' == 'true' ">
				<BeforeTokens>%(RecursiveDir)</BeforeTokens>
				<AfterTokens>$safeprojectname$</AfterTokens>
			</TemplateProjectItems>
			<TemplateProjectItems>
				<SkipUnchangedFiles>true</SkipUnchangedFiles>
			</TemplateProjectItems>
			<TemplateProjectItemsForTransformSource Include="@(TemplateProjectItems->'%(SourceFullPath)')" />
			<TemplateProjectItemsForTransformLayout Include="@(TemplateProjectItems->'%(DestinationFullPath)')" />
			<RootVsTemplateSource Include="*.vstemplate" />
			<ProjectTemplatesSource Include="@(RootVsTemplateSource)" />
			<ProjectTemplatesLayout Include="@(RootVsTemplateSource->'$(ProjectTemplatesLayoutPath)%(FileName)%(Extension)')" />

			<!-- Include the template icon -->
			<ProjectTemplatesSource Include="$(ProjectRoot)doc\logo\favicon.ico" />
			<ProjectTemplatesLayout Include="$(ProjectTemplatesLayoutPath)__TemplateIcon.ico" />

			<TopLevelVS2010ProjectTemplates Include="@(ProjectTemplatesLayout)" Condition=" '%(Extension)' == '.vstemplate' and '%(RootDir)%(Directory)' == '$(ProjectTemplatesLayoutPath)' " />
			<VS2010ProjectTemplateZipFiles Include="@(TopLevelVS2010ProjectTemplates->'%(RootDir)%(Directory)%(FileName).zip')" />

			<TemplateProjectItemsForTransformLayoutFixups Include="@(TemplateProjectItemsForTransformLayout)" Condition=" '%(Extension)' == '.aspx' ">
				<Pattern>&lt;%@ Register Assembly="DotNetOpenAuth[^"]+"</Pattern>
				<Replacement>&lt;%@ Register Assembly="DotNetOpenAuth"</Replacement>
			</TemplateProjectItemsForTransformLayoutFixups>
			<TemplateProjectItemsForTransformLayoutFixups Include="@(TemplateProjectItemsForTransformLayout)" Condition=" '%(Extension)' == '.xaml' ">
				<Pattern>xmlns\:(.+)assembly=DotNetOpenAuth([^;"]+)</Pattern>
				<Replacement>xmlns:$1assembly=DotNetOpenAuth</Replacement>
			</TemplateProjectItemsForTransformLayoutFixups>
			<TemplateProjectItemsForTransformLayoutFixups Include="@(TemplateProjectItemsForTransformLayout)" Condition=" '%(Extension)' == '.config' ">
				<Pattern>type=&quot;DotNetOpenAuth([^,]+), DotNetOpenAuth([^&quot;]+)&quot;</Pattern>
				<Replacement>type=&quot;DotNetOpenAuth$1, DotNetOpenAuth&quot;</Replacement>
			</TemplateProjectItemsForTransformLayoutFixups>
		</ItemGroup>

		<Copy
			SourceFiles="@(ProjectTemplatesSource)"
			DestinationFiles="@(ProjectTemplatesLayout)"
			SkipUnchangedFiles="true" />
		<CopyWithTokenSubstitution
			SourceFiles="@(TemplateProjectItemsForTransformSource)"
			DestinationFiles="@(TemplateProjectItemsForTransformLayout)" />
		<RegexFileReplace
			Files="@(TemplateProjectItemsForTransformLayoutFixups)"
			Pattern="%(Pattern)"
			Replacement="%(Replacement)" />

		<ItemGroup>
			<ProjectTemplateIntendedFiles Include="
																		@(ProjectTemplatesLayout);
																		@(TemplateProjectItemsForTransformLayout);
																		@(VSProjectTemplatesLayout);
																		@(TemplateProjectsLayout);
																		@(VS2010ProjectTemplateZipFiles);
																		" />
			<ProjectTemplateIntendedFiles Remove="@(ProjectItemShortPathAdjustments)" />
		</ItemGroup>
		<Purge Directories="$(ProjectTemplatesLayoutPath)"
					 IntendedFiles="@(ProjectTemplateIntendedFiles)" />
	</Target>

	<Target Name="Zip" DependsOnTargets="Layout" Returns="%(VS2010ProjectTemplateContents.ZipFile)">
		<DiscoverProjectTemplates TopLevelTemplates="@(TopLevelVS2010ProjectTemplates)">
			<Output TaskParameter="ProjectTemplates" ItemName="SubVS2010Templates" />
			<Output TaskParameter="ProjectTemplateContents" ItemName="VS2010TemplateItemContents" />
		</DiscoverProjectTemplates>

		<ItemGroup>
			<!-- Include in each template .zip file the top-level .vstemplate file itself. -->
			<VS2010ProjectTemplateContents Include="@(TopLevelVS2010ProjectTemplates)">
				<ZipFile>$(ProjectTemplatesLayoutPath)%(FileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplatesLayoutPath)</WorkingDirectory>
			</VS2010ProjectTemplateContents>

			<!-- Now throw in all the files in each of the project-level template's directories and their children. -->
			<VS2010ProjectTemplateContents Include="@(VS2010TemplateItemContents)">
				<ZipFile>$(ProjectTemplatesLayoutPath)%(VS2010TemplateItemContents.TopLevelTemplateFileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplatesLayoutPath)</WorkingDirectory>
			</VS2010ProjectTemplateContents>

			<!-- Include the template icon for each .zip file. -->
			<VS2010ProjectTemplateContents Include="@(TopLevelVS2010ProjectTemplates->'$(ProjectTemplatesLayoutPath)__TemplateIcon.ico')">
				<ZipFile>$(ProjectTemplatesLayoutPath)%(TopLevelVS2010ProjectTemplates.FileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplatesLayoutPath)</WorkingDirectory>
			</VS2010ProjectTemplateContents>

			<ExtensionVsixContents Include="%(VS2010ProjectTemplateContents.ZipFile)" />
		</ItemGroup>

		<Zip
			Files="@(VS2010ProjectTemplateContents)"
			ZipFileName="%(VS2010ProjectTemplateContents.ZipFile)"
			WorkingDirectory="%(VS2010ProjectTemplateContents.WorkingDirectory)"
			ZipLevel="$(ZipLevel)"
			/>
	</Target>

	<Target Name="Layout2008" DependsOnTargets="Layout">
		<ItemGroup>
			<ProjectTemplates2008Source Include="$(ProjectTemplatesLayoutPath)**" Exclude="$(ProjectTemplatesLayoutPath)*.zip" />
			<ProjectTemplates2008Layout Include="@(ProjectTemplates2008Source->'$(ProjectTemplates2008LayoutPath)%(RecursiveDir)%(FileName)%(Extension)')" />
			<ProjectTemplates2008Layout>
				<HardLink Condition=" '%(Extension)' != '.csproj' ">true</HardLink>
			</ProjectTemplates2008Layout>

			<VS2008ProjectTemplates Include="@(ProjectTemplates2008Layout)" Condition="'%(Extension)' == '.vstemplate'" />
			<TopLevelVS2008ProjectTemplates Include="@(VS2008ProjectTemplates)" Condition="'%(RootDir)%(Directory)' == '$(ProjectTemplates2008LayoutPath)'" />
			<VS2008ProjectTemplateZipFiles Include="@(TopLevelVS2008ProjectTemplates->'%(RootDir)%(Directory)%(FileName).zip')" />
		</ItemGroup>
		<Message Text="VS2008ProjectTemplates: @(VS2008ProjectTemplates)" />

		<HardLinkCopy SourceFiles="@(ProjectTemplates2008Source)" DestinationFiles="@(ProjectTemplates2008Layout)" />

		<DowngradeProjects
			Projects="@(ProjectTemplates2008Layout)"
			Condition="'%(Extension)' == '.csproj'"
			DowngradeMvc2ToMvc1="$(DowngradeMvc2ToMvc1)"
			InPlaceDowngrade="true"
			/>

		<Purge Directories="$(ProjectTemplates2008LayoutPath)"
					 IntendedFiles="@(ProjectTemplates2008Layout);@(VS2008ProjectTemplateZipFiles)" />
	</Target>

	<Target Name="Zip2008" DependsOnTargets="Layout2008" Returns="%(VS2008ProjectTemplateContents.ZipFile)">
		<DiscoverProjectTemplates TopLevelTemplates="@(TopLevelVS2008ProjectTemplates)">
			<Output TaskParameter="ProjectTemplates" ItemName="SubVS2008Templates" />
			<Output TaskParameter="ProjectTemplateContents" ItemName="VS2008TemplateItemContents" />
		</DiscoverProjectTemplates>

		<ItemGroup>
			<!-- Include in each template .zip file the top-level .vstemplate file itself. -->
			<VS2008ProjectTemplateContents Include="@(TopLevelVS2008ProjectTemplates)">
				<ZipFile>$(ProjectTemplates2008LayoutPath)%(FileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplates2008LayoutPath)</WorkingDirectory>
			</VS2008ProjectTemplateContents>

			<!-- Now throw in all the files in each of the project-level template's directories and their children. -->
			<VS2008ProjectTemplateContents Include="@(VS2008TemplateItemContents)">
				<ZipFile>$(ProjectTemplates2008LayoutPath)%(VS2008TemplateItemContents.TopLevelTemplateFileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplates2008LayoutPath)</WorkingDirectory>
			</VS2008ProjectTemplateContents>

			<!-- Include the template icon for each .zip file. -->
			<VS2008ProjectTemplateContents Include="@(TopLevelVS2008ProjectTemplates->'$(ProjectTemplates2008LayoutPath)__TemplateIcon.ico')">
				<ZipFile>$(ProjectTemplates2008LayoutPath)%(TopLevelVS2008ProjectTemplates.FileName).zip</ZipFile>
				<WorkingDirectory>$(ProjectTemplates2008LayoutPath)</WorkingDirectory>
			</VS2008ProjectTemplateContents>
		</ItemGroup>

		<Zip
			Files="@(VS2008ProjectTemplateContents)"
			ZipFileName="%(VS2008ProjectTemplateContents.ZipFile)"
			WorkingDirectory="%(VS2008ProjectTemplateContents.WorkingDirectory)"
			ZipLevel="$(ZipLevel)"
			/>
	</Target>

	<Target Name="Build" DependsOnTargets="Zip;Zip2008" />

	<Import Project="$(ProjectRoot)tools\DotNetOpenAuth.automated.targets"/>
	<Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), EnlistmentInfo.targets))\EnlistmentInfo.targets" Condition=" '$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), EnlistmentInfo.targets))' != '' " />
</Project>